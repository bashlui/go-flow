# Name of the workflow
name: GoFlow CI

# Triggers the workflow on push or pull request events
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

# Defines a single job named 'build'
jobs:
  build:
    name: Build and Test
    # Runs the job on a fresh Ubuntu runner
    runs-on: ubuntu-latest
    
    # Sets up a PostgreSQL database service for integration tests
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: goflow_user
          POSTGRES_PASSWORD: goflow_pass
          POSTGRES_DB: goflow_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Cache Go modules and build cache
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Step 3: Set up the Go environment
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.1'
          cache: true

      # Step 4: Wait for the PostgreSQL service to be ready
      - name: Wait for PostgreSQL
        run: |
          for i in `seq 1 10`; do
            nc -z localhost 5432 && echo "Success: PostgreSQL is up!" && break
            echo -n "."
            sleep 1
          done

      # Step 5: Run database migrations to set up the tables
      - name: Run migrations
        run: |
          go install github.com/golang-migrate/migrate/v4/cmd/migrate@latest
          migrate -path db/migrations -database "pgx://goflow_user:goflow_pass@localhost:5432/goflow_db?sslmode=disable" up

      # Step 6: Run linters for code quality checks
      - name: Run linters
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.54.2
          args: --timeout=5m

      # Step 7: Run unit and integration tests
      - name: Run tests
        env:
          DATABASE_URL: "pgx://goflow_user:goflow_pass@localhost:5432/goflow_db?sslmode=disable"
        run: go test -v ./...

      # Step 8: Build the Go application binary
      - name: Build
        run: go build -o goflow-app ./cmd/server
